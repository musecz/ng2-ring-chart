{"version":3,"file":"ring-chart.component.js","sourceRoot":"","sources":["../../src/ring-chart.component.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,SAAS,EAAU,KAAK,EAAE,MAAM,eAAe,CAAC;AAkEzD,IAAa,kBAAkB;IAQ7B;QAPS,UAAK,GAAW,YAAY,CAAC;QAC7B,UAAK,GAAW,CAAC,CAAC;QAClB,SAAI,GAAW,CAAC,CAAC;QACjB,UAAK,GAAW,SAAS,CAAC;QAC1B,YAAO,GAAY,IAAI,CAAC;QAI/B,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;IAC5B,CAAC;IAED,qCAAQ,GAAR;QACE,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;YAClB,IAAI,CAAC,UAAU,EAAE,CAAC;QACpB,IAAI;YACF,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAEzD,CAAC;IAED,2CAAc,GAAd;QAAA,iBAKC;QAJC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAClE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,IAAY,EAAE,KAAa;YAC3C,CAAC,KAAK,CAAC,GAAG,KAAI,CAAC,OAAO,CAAC,KAAI,CAAC,IAAI,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,KAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;QACnG,CAAC,CAAC,CAAC;IACL,CAAC;IAED,uCAAU,GAAV;QAAA,iBAUC;QATC,IAAI,KAAK,GAAkB,EAAE,CAAC;QAC9B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,GAAW,EAAE,KAAa,IAAK,OAAA,KAAK,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,KAAI,CAAC,KAAK,CAAC,EAAzC,CAAyC,CAAC,CAAC;QAC5F,IAAI,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,OAAR,IAAI,EAAQ,KAAK,EAAE,CAAC;QAC9C,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC;YACnC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC;gBACb,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;YACvC,IAAI;gBACF,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;QACrC,CAAC;IACH,CAAC;IAEH,yBAAC;AAAD,CAAC,AAxCD,IAwCC;AAvCU;IAAR,KAAK,EAAE;iDAA8B;AAC7B;IAAR,KAAK,EAAE;iDAAmB;AAClB;IAAR,KAAK,EAAE;gDAAkB;AACjB;IAAR,KAAK,EAAE;iDAA2B;AAC1B;IAAR,KAAK,EAAE;mDAAyB;AALtB,kBAAkB;IAhE9B,SAAS,CAAC;QACT,QAAQ,EAAE,gBAAgB;QAC1B,QAAQ,EAAE,6XAMD;QACT,MAAM,EAAE;YAEN,wqCAkDC;SACA;KACJ,CAAC;GACW,kBAAkB,CAwC9B;SAxCY,kBAAkB","sourcesContent":["import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-ring-chart',\n  template: `\n    <div class=\"selling-point-name\">\n    {{this.label}}\n    </div>\n    <div class=\"occupation-indicator\" [ngClass]=\"{'tooltip': tooltip}\" [attr.data-tip]=\"'value: '+value+'%'\" >\n      <div class=\"occupation-ring\" *ngFor=\"let ring of numbers; let i = index\" [ngStyle]=\"{'width': ring+'%','height': ring+'%','background': backgroundColor[i]}\"></div>\n    </div>`,\n  styles: [\n\n    `div.tooltip::before {\n    content: attr(data-tip) ;   \n        \n    font-size: 10px;\n    position:absolute;\n    z-index: 999;\n    white-space:nowrap;\n    bottom:9999px;\n    left: 50%;\n    background:#00ce9f;\n    color:#e0e0e0;\n    padding:0px 7px;\n    line-height: 24px;\n    height: 24px;\n    opacity: 0;  \n    transition:opacity 0.4s ease-out; \n    }\n        \n    div.tooltip:hover::before {\n        opacity: 1;\n        bottom:-35px;\n        border-radius: 25px;\n    }\n\n    .selling-point-name {\n        padding-bottom: 0.5em;\n        font-size: 0.8em;\n        color: #333;\n        text-align: center; \n    }\n\n    .occupation-indicator {\n        position: relative;\n        margin: 1em auto 0; \n        width: 50px;\n        height: 50px; \n    }\n\n    .occupation-ring {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        -webkit-transform: translate(-50%, -50%);\n        -moz-transform: translate(-50%, -50%);\n        -ms-transform: translate(-50%, -50%);\n        -o-transform: translate(-50%, -50%);\n        transform: translate(-50%, -50%);\n        border: 1px solid #f89a80;\n        border-radius: 100%; \n    }\n    `\n    ]\n})\nexport class RingChartComponent implements OnInit {\n  @Input() label: string = 'label Name';\n  @Input() value: number = 0;\n  @Input() step: number = 3;\n  @Input() color: string = \"#F13502\";\n  @Input() tooltip: boolean = true;\n  public numbers: any;\n  public backgroundColor: any;\n  constructor() {\n    this.backgroundColor = [];\n  }\n\n  ngOnInit() {\n    this.circleCreation();\n    if (this.value != 0)\n      this.roundValue();\n    else\n      this.backgroundColor = Array(this.step).fill('none');\n\n  }\n\n  circleCreation() {\n    this.numbers = Array(this.step).fill(Math.round(100 / this.step));\n    this.numbers.map((item: number, index: number) => {\n      (index) ? this.numbers[this.step - (index + 1)] = Math.round((index + 1) * 100 / this.step) : '';\n    });\n  }\n\n  roundValue() {\n    let delta: Array<number> = [];\n    this.numbers.map((val: number, index: number) => delta[index] = Math.abs(val - this.value));\n    let index = delta.indexOf(Math.min(...delta));\n    for (let i = 0; i < this.step; i++) {\n      if (i == index)\n        this.backgroundColor[i] = this.color;\n      else\n        this.backgroundColor[i] = 'none';\n    }\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}